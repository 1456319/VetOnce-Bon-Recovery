Hello, Jules. Your task is to reconstruct a lost GitHub repository. I will provide you with the complete directory structure and the full contents for every necessary file.

Please follow these steps precisely to recreate the best-of-n-prompt-jailbreaker project.

Step 1: Initial Project Setup
First, create a new Next.js project. When prompted by the command line tool, use the following settings:

App name: best-of-n-prompt-jailbreaker

Language: TypeScript

ESLint: Yes

Tailwind CSS: Yes

src/ directory: No

App Router: Yes

Default import alias: No (we will configure this manually)

After creation, navigate into the new project directory: cd best-of-n-prompt-jailbreaker

Step 2: Create Directories and Files
Now, create the following files with the exact paths and content provided. Please overwrite any existing placeholder files created by create-next-app.

Root Directory Files
File: package.json

JSON

{
  "name": "best-of-n-prompt-jailbreaker",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "lucide-react": "^0.340.0",
    "next": "14.1.0",
    "openai": "^4.28.4",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}
File: tsconfig.json

JSON

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{"name": "next"}],
    "paths": {"@/*": ["./*"]}
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
File: next.config.js

JavaScript

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};
module.exports = nextConfig;
File: tailwind.config.ts

TypeScript

import type { Config } from "tailwindcss";
export default {
  darkMode: ["class"],
  content: ["./app/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./lib/**/*.{ts,tsx}"],
  theme: {
    extend: {
      colors: {
        background: "rgb(var(--background))",
        foreground: "rgb(var(--foreground))",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
File: postcss.config.js

JavaScript

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
File: .env.local

OPENAI_API_KEY=your-api-key-goes-here
app/ Directory
File: app/globals.css

CSS

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 255 255 255;
  --foreground: 15 23 42;
}
html, body {
  height: 100%;
}
File: app/layout.tsx

TypeScript

export const metadata = {
  title: "Best-of-N Prompt Jailbreaker",
  description: "Generate N variants and pick the best",
};
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body className="min-h-screen bg-background text-foreground">
        {children}
      </body>
    </html>
  );
}
File: app/page.tsx

TypeScript

"use client";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
export default function Page() {
  const [prompt, setPrompt] = useState("");
  const [n, setN] = useState(10);
  const [changeCase, setChangeCase] = useState(true);
  const [shuffleLetters, setShuffleLetters] = useState(true);
  const [replaceLetters, setReplaceLetters] = useState(true);
  const [output, setOutput] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);

  async function handleGenerate() {
    setIsLoading(true);
    setOutput("");
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt, n, transforms: { changeCase, shuffleLetters, replaceLetters } }),
    });
    const json = await res.json();
    setOutput(json?.best ?? "No output");
    setIsLoading(false);
  }

  return (
    <main className="mx-auto max-w-2xl px-6 py-10 space-y-6">
      <h1 className="text-2xl font-semibold">Best-of-N Prompt Generator</h1>
      <div className="space-y-2">
        <Label htmlFor="prompt">System Prompt</Label>
        <Input id="prompt" value={prompt} onChange={(e) => setPrompt(e.target.value)} placeholder="Enter a prompt" />
      </div>
      <div className="space-y-2">
        <Label htmlFor="prompt">User Prompt</Label>
        <Input id="prompt" value={prompt} onChange={(e) => setPrompt(e.target.value)} placeholder="Enter a prompt" />
      </div>
      <div className="flex items-center gap-4">
        <Label htmlFor="n">N</Label>
        <Input id="n" type="number" min={1} max={50} value={n} onChange={(e) => setN(Number(e.target.value))} className="w-24" />
      </div>
      <div className="grid grid-cols-2 gap-4">
        <div className="flex items-center justify-between">
          <Label>Change case</Label>
          <Switch checked={changeCase} onCheckedChange={setChangeCase} />
        </div>
        <div className="flex items-center justify-between">
          <Label>Shuffle letters</Label>
          <Switch checked={shuffleLetters} onCheckedChange={setShuffleLetters} />
        </div>
        <div className="flex items-center justify-between">
          <Label>Replace letters</Label>
          <Switch checked={replaceLetters} onCheckedChange={setReplaceLetters} />
        </div>
      </div>
      <Button onClick={handleGenerate} disabled={isLoading}>{isLoading ? 'Generating...' : 'Generate'}</Button>
      <div className="space-y-2">
        <Label>Output</Label>
        <div className="min-h-24 rounded-md border border-slate-300 bg-white p-3 text-sm">{output || "â€”"}</div>
      </div>
    </main>
  );
}
File: app/api/generate/route.ts

TypeScript

import { NextResponse } from "next/server";
import OpenAI from "openai";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

function transformVariant(text: string, opts: { changeCase: boolean; shuffleLetters: boolean; replaceLetters: boolean }) {
  let s = text;
  if (opts.changeCase) {
    s = [...s].map((ch) => (/[a-z]/i.test(ch) ? (Math.random() < 0.5 ? ch.toLowerCase() : ch.toUpperCase()) : ch)).join("");
  }
  if (opts.shuffleLetters) {
    const arr = [...s];
    for (let i = 0; i < arr.length; i += 3) {
      const slice = arr.slice(i, i + 3);
      for (let j = slice.length - 1; j > 0; j--) {
        const k = Math.floor(Math.random() * (j + 1));
        [slice[j], slice[k]] = [slice[k], slice[j]];
      }
      for (let j = 0; j < slice.length; j++) arr[i + j] = slice[j];
    }
    s = arr.join("");
  }
  if (opts.replaceLetters) {
    const map: Record<string, string> = { o: "0", O: "0", i: "1", I: "1", s: "$", S: "$", a: "@", e: "3", E: "3", g: "9", G: "9" };
    s = [...s].map((ch) => map[ch] ?? ch).join("");
  }
  return s;
}

function scoreVariant(original: string, variant: string) {
  const alpha = (variant.match(/[a-z]/gi)?.length ?? 0) / Math.max(variant.length, 1);
  const symbols = (variant.match(/[^a-z0-9\s]/gi)?.length ?? 0) / Math.max(variant.length, 1);
  const diff = levenshtein(original, variant) / Math.max(original.length, 1);
  return 0.6 * diff + 0.3 * alpha - 0.2 * symbols;
}

function levenshtein(a: string, b: string) {
  const m = a.length, n = b.length;
  const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));
  for (let i = 0; i <= m; i++) dp[i][0] = i;
  for (let j = 0; j <= n; j++) dp[0][j] = j;
  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);
    }
  }
  return dp[m][n];
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { systemPrompt, userPrompt, n = 10, transforms = { changeCase: true, shuffleLetters: true, replaceLetters: true } } = body ?? {};
    if (typeof userPrompt !== "string" || !userPrompt.trim()) return NextResponse.json({ error: "Invalid prompt" }, { status: 400 });

    const combinedPrompt = systemPrompt ? `${systemPrompt}\n\n${userPrompt}` : userPrompt;

    // Generate N transformed variants locally
    const variants: string[] = [];
    for (let i = 0; i < Math.min(n, 50); i++) {
      variants.push(transformVariant(userPrompt, transforms));
    }

    // Call OpenAI for model outputs
    let modelOutputs: string[] = [];
    if (process.env.OPENAI_API_KEY) {
      const completion = await client.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "system", content: systemPrompt || "" },{ role: "user", content: userPrompt }],
        n: Math.min(n, 10),
        temperature: 0.8,
      });
      modelOutputs = completion.choices.map((c) => c.message?.content ?? "").filter(Boolean);
    }

    const all = [...variants, ...modelOutputs];
    if (all.length === 0) return NextResponse.json({ error: "No variants generated" }, { status: 500 });

    let best = all[0], bestScore = scoreVariant(userPrompt, best);
    for (const v of all.slice(1)) {
      const s = scoreVariant(userPrompt, v);
      if (s > bestScore) { best = v; bestScore = s; }
    }

    return NextResponse.json({ best, variants: all });
  } catch (error) {
    return NextResponse.json({ error: "An internal server error occurred." }, { status: 500 });
  }
}
lib/ and components/ Directories
Now, create the following directories and the files within them.

File: lib/utils.ts

TypeScript

import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
File: components/ui/button.tsx

TypeScript

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",
  {
    variants: {
      variant: {
        default: "bg-slate-900 text-white hover:bg-slate-700",
        outline: "border border-slate-200 hover:bg-slate-100",
        ghost: "hover:bg-slate-100",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 px-3",
        lg: "h-10 px-6",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp ref={ref} className={cn(buttonVariants({ variant, size }), className)} {...props} />;
  }
);
Button.displayName = "Button";
File: components/ui/input.tsx

TypeScript

import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {
  return (
    <input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-2",
        className
      )}
      {...props}
    />
  );
});
Input.displayName = "Input";
File: components/ui/label.tsx

TypeScript

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70");

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
File: components/ui/switch.tsx

TypeScript

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
